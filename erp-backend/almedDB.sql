-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.attendance
(
    emp_code text COLLATE pg_catalog."default" NOT NULL,
    attendance_date date NOT NULL,
    shift_code text COLLATE pg_catalog."default" NOT NULL,
    clock_in timestamp without time zone,
    clock_out timestamp without time zone,
    status text COLLATE pg_catalog."default",
    is_flagged boolean DEFAULT false,
    processed_at timestamp without time zone DEFAULT now(),
    last_updated timestamp without time zone DEFAULT now(),
    CONSTRAINT attendance_pkey PRIMARY KEY (emp_code, attendance_date)
);

CREATE TABLE IF NOT EXISTS public.clients
(
    client_id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default",
    phone text COLLATE pg_catalog."default",
    CONSTRAINT clients_pkey PRIMARY KEY (client_id)
);

CREATE TABLE IF NOT EXISTS public.cups
(
    cup_id text COLLATE pg_catalog."default" NOT NULL,
    live_quantity integer DEFAULT 0,
    last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT cups_pkey PRIMARY KEY (cup_id)
);

CREATE TABLE IF NOT EXISTS public.cupspecs
(
    label_id text COLLATE pg_catalog."default" NOT NULL,
    label text COLLATE pg_catalog."default" NOT NULL,
    diameter numeric NOT NULL,
    volume numeric NOT NULL,
    design_id integer,
    type text COLLATE pg_catalog."default",
    weight numeric,
    CONSTRAINT cupspecs_pkey PRIMARY KEY (label_id)
);

CREATE TABLE IF NOT EXISTS public.cuptransactions
(
    cup_txn_id serial NOT NULL,
    cup_id text COLLATE pg_catalog."default" NOT NULL,
    order_id integer,
    quantity integer NOT NULL,
    sheet_consumed integer DEFAULT 0,
    sheet_id text COLLATE pg_catalog."default",
    rejected_cups integer DEFAULT 0,
    shift text COLLATE pg_catalog."default",
    operator text COLLATE pg_catalog."default",
    machine_id text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    remarks text COLLATE pg_catalog."default",
    CONSTRAINT cuptransactions_pkey PRIMARY KEY (cup_txn_id)
);

CREATE TABLE IF NOT EXISTS public.designs
(
    design_id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    file_url text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    remarks text COLLATE pg_catalog."default",
    CONSTRAINT designs_pkey PRIMARY KEY (design_id)
);

CREATE TABLE IF NOT EXISTS public.employees
(
    emp_code text COLLATE pg_catalog."default" NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    role text COLLATE pg_catalog."default",
    contact text COLLATE pg_catalog."default",
    email text COLLATE pg_catalog."default",
    address text COLLATE pg_catalog."default",
    joining_date date,
    CONSTRAINT employees_pkey PRIMARY KEY (emp_code)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    order_id serial NOT NULL,
    design_id integer,
    client_id integer,
    order_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    dispatch_date timestamp without time zone,
    payment_received_date timestamp without time zone,
    invoice_amount numeric,
    specs text COLLATE pg_catalog."default",
    remarks text COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" DEFAULT 'Recieved',
    created_by text COLLATE pg_catalog."default",
    last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT orders_pkey PRIMARY KEY (order_id)
);

CREATE TABLE IF NOT EXISTS public.ot_approvals
(
    ot_id serial NOT NULL,
    emp_code text COLLATE pg_catalog."default",
    ot_date date NOT NULL,
    approved_hours integer NOT NULL,
    remarks text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT ot_approvals_pkey PRIMARY KEY (ot_id)
);

CREATE TABLE IF NOT EXISTS public.printedcups
(
    printed_cup_id text COLLATE pg_catalog."default" NOT NULL,
    design_id integer,
    live_quantity integer DEFAULT 0,
    last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT printedcups_pkey PRIMARY KEY (printed_cup_id)
);

CREATE TABLE IF NOT EXISTS public.printedcuptransactions
(
    printed_cup_txn_id serial NOT NULL,
    printed_cup_id text COLLATE pg_catalog."default" NOT NULL,
    order_id integer,
    cup_id text COLLATE pg_catalog."default",
    design_id integer,
    machine_id text COLLATE pg_catalog."default",
    quantity integer NOT NULL,
    rejected_cups integer DEFAULT 0,
    shift text COLLATE pg_catalog."default",
    operator text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    remarks text COLLATE pg_catalog."default",
    CONSTRAINT printedcuptransactions_pkey PRIMARY KEY (printed_cup_txn_id)
);

CREATE TABLE IF NOT EXISTS public.punch_data
(
    emp_code text COLLATE pg_catalog."default" NOT NULL,
    punch_time timestamp without time zone NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT punch_data_pkey PRIMARY KEY (emp_code, punch_time)
);

CREATE TABLE IF NOT EXISTS public.rawmaterials
(
    material_id serial NOT NULL,
    material_name text COLLATE pg_catalog."default" NOT NULL,
    live_quantity numeric DEFAULT 0,
    last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT rawmaterials_pkey PRIMARY KEY (material_id)
);

CREATE TABLE IF NOT EXISTS public.rawmaterialtransactions
(
    raw_material_txn_id serial NOT NULL,
    material_id integer NOT NULL,
    order_id integer,
    txn_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    quantity numeric NOT NULL,
    shift text COLLATE pg_catalog."default",
    operator text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    remarks text COLLATE pg_catalog."default",
    CONSTRAINT rawmaterialtransactions_pkey PRIMARY KEY (raw_material_txn_id)
);

CREATE TABLE IF NOT EXISTS public.sheets
(
    sheet_id text COLLATE pg_catalog."default" NOT NULL,
    sheet_size numeric NOT NULL,
    sheet_thickness numeric NOT NULL,
    live_quantity integer DEFAULT 0,
    last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT sheets_pkey PRIMARY KEY (sheet_id)
);

CREATE TABLE IF NOT EXISTS public.sheettransactions
(
    sheet_txn_id serial NOT NULL,
    sheet_id text COLLATE pg_catalog."default" NOT NULL,
    order_id integer,
    quantity integer NOT NULL,
    scrap integer DEFAULT 0,
    shift text COLLATE pg_catalog."default",
    operator text COLLATE pg_catalog."default",
    machine_id text COLLATE pg_catalog."default",
    sheet_size numeric NOT NULL,
    sheet_thickness numeric NOT NULL,
    primary_material text COLLATE pg_catalog."default",
    additives text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    remarks text COLLATE pg_catalog."default",
    CONSTRAINT sheettransactions_pkey PRIMARY KEY (sheet_txn_id)
);

CREATE TABLE IF NOT EXISTS public.shiftmapping
(
    mapping_id serial NOT NULL,
    emp_code text COLLATE pg_catalog."default" NOT NULL,
    date date NOT NULL,
    shift_code text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT shiftmapping_pkey PRIMARY KEY (mapping_id),
    CONSTRAINT shiftmapping_emp_code_date_key UNIQUE (emp_code, date)
);

CREATE TABLE IF NOT EXISTS public.shifts
(
    shift_code text COLLATE pg_catalog."default" NOT NULL,
    shift_name text COLLATE pg_catalog."default" NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    CONSTRAINT shifts_pkey PRIMARY KEY (shift_code)
);

ALTER TABLE IF EXISTS public.attendance
    ADD CONSTRAINT fk_attendance_employee FOREIGN KEY (emp_code)
    REFERENCES public.employees (emp_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.attendance
    ADD CONSTRAINT fk_attendance_shift FOREIGN KEY (shift_code)
    REFERENCES public.shifts (shift_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.cupspecs
    ADD CONSTRAINT fk_cupspecs_design FOREIGN KEY (design_id)
    REFERENCES public.designs (design_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cups
    ADD CONSTRAINT cups_cup_id_fkey FOREIGN KEY (cup_id)
    REFERENCES public.cupspecs (label_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS cups_pkey
    ON public.cups(cup_id);


ALTER TABLE IF EXISTS public.cuptransactions
    ADD CONSTRAINT cuptransactions_cup_id_fkey FOREIGN KEY (cup_id)
    REFERENCES public.cups (cup_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cuptransactions
    ADD CONSTRAINT cuptransactions_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cuptransactions
    ADD CONSTRAINT cuptransactions_sheet_id_fkey FOREIGN KEY (sheet_id)
    REFERENCES public.sheets (sheet_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_client_id_fkey FOREIGN KEY (client_id)
    REFERENCES public.clients (client_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_design_id_fkey FOREIGN KEY (design_id)
    REFERENCES public.designs (design_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ot_approvals
    ADD CONSTRAINT ot_approvals_emp_code_fkey FOREIGN KEY (emp_code)
    REFERENCES public.employees (emp_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.printedcups
    ADD CONSTRAINT printedcups_design_id_fkey FOREIGN KEY (design_id)
    REFERENCES public.designs (design_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.printedcups
    ADD CONSTRAINT printedcups_printed_cup_id_fkey FOREIGN KEY (printed_cup_id)
    REFERENCES public.cupspecs (label_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS printedcups_pkey
    ON public.printedcups(printed_cup_id);


ALTER TABLE IF EXISTS public.printedcuptransactions
    ADD CONSTRAINT printedcuptransactions_cup_id_fkey FOREIGN KEY (cup_id)
    REFERENCES public.cups (cup_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.printedcuptransactions
    ADD CONSTRAINT printedcuptransactions_design_id_fkey FOREIGN KEY (design_id)
    REFERENCES public.designs (design_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.printedcuptransactions
    ADD CONSTRAINT printedcuptransactions_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.printedcuptransactions
    ADD CONSTRAINT printedcuptransactions_printed_cup_id_fkey FOREIGN KEY (printed_cup_id)
    REFERENCES public.printedcups (printed_cup_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.punch_data
    ADD CONSTRAINT punch_data_emp_code_fkey FOREIGN KEY (emp_code)
    REFERENCES public.employees (emp_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.rawmaterialtransactions
    ADD CONSTRAINT rawmaterialtransactions_material_id_fkey FOREIGN KEY (material_id)
    REFERENCES public.rawmaterials (material_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rawmaterialtransactions
    ADD CONSTRAINT rawmaterialtransactions_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sheettransactions
    ADD CONSTRAINT sheettransactions_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sheettransactions
    ADD CONSTRAINT sheettransactions_sheet_id_fkey FOREIGN KEY (sheet_id)
    REFERENCES public.sheets (sheet_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.shiftmapping
    ADD CONSTRAINT shiftmapping_emp_code_fkey FOREIGN KEY (emp_code)
    REFERENCES public.employees (emp_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.shiftmapping
    ADD CONSTRAINT shiftmapping_shift_code_fkey FOREIGN KEY (shift_code)
    REFERENCES public.shifts (shift_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

-- Add constraint to ensure order status is one of the valid values
ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT check_order_status CHECK (status IN ('Received', 'Processing', 'In Production', 'Ready for Dispatch', 'Dispatched'));

-- Function to calculate weight from diameter and volume
CREATE OR REPLACE FUNCTION calculate_cup_weight(diameter_val numeric, volume_val numeric)
RETURNS numeric AS $$
BEGIN
    -- Basic weight calculation: adjust formula based on actual requirements
    -- This is a placeholder - you may need to adjust based on your specific weight calculation
    RETURN ROUND((volume_val * 0.001) + (diameter_val * 0.01), 2);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Create a trigger function to auto-calculate weight
CREATE OR REPLACE FUNCTION update_cup_weight()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.diameter IS NOT NULL AND NEW.volume IS NOT NULL THEN
        NEW.weight = calculate_cup_weight(NEW.diameter, NEW.volume);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to auto-calculate weight on insert/update
DROP TRIGGER IF EXISTS trigger_update_cup_weight ON public.cupspecs;
CREATE TRIGGER trigger_update_cup_weight
    BEFORE INSERT OR UPDATE OF diameter, volume ON public.cupspecs
    FOR EACH ROW
    EXECUTE FUNCTION update_cup_weight();

-- Add indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_cupspecs_design_id ON public.cupspecs(design_id);
CREATE INDEX IF NOT EXISTS idx_cupspecs_type ON public.cupspecs(type);

END;